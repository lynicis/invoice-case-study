// Code generated by MockGen. DO NOT EDIT.
// Source: internal/invoice/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/invoice/repository.go -destination=internal/invoice/repository_mock.go -package=invoice
//

// Package invoice is a generated GoMock package.
package invoice

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockRepository) CreateInvoice(ctx context.Context, invoice *InvoiceDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockRepositoryMockRecorder) CreateInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockRepository)(nil).CreateInvoice), ctx, invoice)
}

// DeleteInvoiceById mocks base method.
func (m *MockRepository) DeleteInvoiceById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoiceById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoiceById indicates an expected call of DeleteInvoiceById.
func (mr *MockRepositoryMockRecorder) DeleteInvoiceById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoiceById", reflect.TypeOf((*MockRepository)(nil).DeleteInvoiceById), ctx, id)
}

// GetInvoiceById mocks base method.
func (m *MockRepository) GetInvoiceById(ctx context.Context, id string) (*InvoiceDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceById", ctx, id)
	ret0, _ := ret[0].(*InvoiceDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceById indicates an expected call of GetInvoiceById.
func (mr *MockRepositoryMockRecorder) GetInvoiceById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceById", reflect.TypeOf((*MockRepository)(nil).GetInvoiceById), ctx, id)
}

// GetInvoices mocks base method.
func (m *MockRepository) GetInvoices(ctx context.Context, page, pageSize int, search string) (*[]InvoiceDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoices", ctx, page, pageSize, search)
	ret0, _ := ret[0].(*[]InvoiceDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoices indicates an expected call of GetInvoices.
func (mr *MockRepositoryMockRecorder) GetInvoices(ctx, page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoices", reflect.TypeOf((*MockRepository)(nil).GetInvoices), ctx, page, pageSize, search)
}

// UpdateInvoiceById mocks base method.
func (m *MockRepository) UpdateInvoiceById(ctx context.Context, id string, invoice *InvoiceDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceById", ctx, id, invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoiceById indicates an expected call of UpdateInvoiceById.
func (mr *MockRepositoryMockRecorder) UpdateInvoiceById(ctx, id, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceById", reflect.TypeOf((*MockRepository)(nil).UpdateInvoiceById), ctx, id, invoice)
}
